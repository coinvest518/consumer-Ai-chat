import { LanguageModelLike } from "@langchain/core/language_models/base";
import { StructuredToolInterface, DynamicTool } from "@langchain/core/tools";
import { RunnableToolLike } from "@langchain/core/runnables";
import { StateGraph, CompiledStateGraph, AnnotationRoot } from "@langchain/langgraph";
import { CreateReactAgentParams } from "@langchain/langgraph/prebuilt";
type OutputMode = "full_history" | "last_message";
export type CreateSupervisorParams<AnnotationRootT extends AnnotationRoot<any>> = {
    agents: CompiledStateGraph<AnnotationRootT["State"], AnnotationRootT["Update"]>[];
    llm: LanguageModelLike;
    tools?: (StructuredToolInterface | RunnableToolLike | DynamicTool)[];
    prompt?: CreateReactAgentParams["prompt"];
    stateSchema?: AnnotationRootT;
    outputMode?: OutputMode;
    addHandoffBackMessages?: boolean;
    supervisorName?: string;
};
/**
 * Create a multi-agent supervisor.
 *
 * @param agents List of agents to manage
 * @param llm Language model to use for the supervisor
 * @param tools Tools to use for the supervisor
 * @param prompt Optional prompt to use for the supervisor. Can be one of:
 *   - string: This is converted to a SystemMessage and added to the beginning of the list of messages in state["messages"]
 *   - SystemMessage: this is added to the beginning of the list of messages in state["messages"]
 *   - Function: This function should take in full graph state and the output is then passed to the language model
 *   - Runnable: This runnable should take in full graph state and the output is then passed to the language model
 * @param stateSchema State schema to use for the supervisor graph
 * @param outputMode Mode for adding managed agents' outputs to the message history in the multi-agent workflow.
 *   Can be one of:
 *   - `full_history`: add the entire agent message history
 *   - `last_message`: add only the last message (default)
 * @param addHandoffBackMessages Whether to add a pair of (AIMessage, ToolMessage) to the message history
 *   when returning control to the supervisor to indicate that a handoff has occurred
 * @param supervisorName Name of the supervisor node
 */
declare const createSupervisor: <AnnotationRootT extends AnnotationRoot<any> = AnnotationRoot<{
    messages: import("@langchain/langgraph").BinaryOperatorAggregate<import("@langchain/core/messages").BaseMessage[], import("@langchain/langgraph").Messages>;
}>>({ agents, llm, tools, prompt, stateSchema, outputMode, addHandoffBackMessages, supervisorName, }: CreateSupervisorParams<AnnotationRootT>) => StateGraph<AnnotationRootT["spec"], AnnotationRootT["State"], AnnotationRootT["Update"], any, AnnotationRootT["spec"], AnnotationRootT["spec"], any>;
export { createSupervisor, type OutputMode };
